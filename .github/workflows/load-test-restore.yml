name: Restore Dataset
run-name: ${{ github.actor }} retrieving data-sets
on:
  workflow_dispatch:
    inputs:
      size:
        description: 'Size of the dataset to restore'
        required: true
        type: choice
        options:
          - 'small'
          - 'medium'
      hostname:
        description: 'Hostname of the server'
        required: true
        type: string
      ref:
        description: 'Branch ref to use'
        required: false
        type: string
        default: 'master'
      version:
        description: 'Version of the dataset to restore (3.8/3.9)'
        required: false
        default: '3.8'
        type: string
      architecture:
        description: 'Architecture of the server (standalone/cluster)'
        required: false
        default: 'standalone'
        type: choice
        options:
          - 'standalone'
          - 'cluster'

  workflow_call:
    inputs:
      hostname:
        description: 'Hostname of the server'
        required: true
        type: string
      size:
        description: 'Size of the dataset to restore (small/medium)'
        required: false
        default: 'small'
        type: string
      version:
        description: 'Version of the dataset to restore (3.8/3.9)'
        required: false
        default: '3.8'
        type: string
      ref:
        description: 'Branch ref to use'
        required: false
        type: string
        default: 'master'
      architecture:
        description: 'Architecture of the server (standalone/cluster)'
        required: false
        default: 'standalone'
        type: string
    secrets:
      BACKUP_SSH_KEY:
        description: SSH key to access the GitHub Enterprise instance
        required: true
      INTERNAL_ACTIONS_DX_BOT_ACCOUNT_TOKEN:
        description: Token for the internal actions dx bot account
        required: true
      AZURE_ACCOUNT_NAME:
        description: Azure storage account name
        required: false
      AZURE_CONTAINER_NAME:
        description: Azure storage container name
        required: false
      CONNECTIONSTRING:
        description: Azure storage connection string
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: github/backup-utils-private
          ref: ${{ inputs.ref }}
          token: "${{ secrets.INTERNAL_ACTIONS_DX_BOT_ACCOUNT_TOKEN }}"

      - run: docker build . --file Dockerfile --tag backup-utils
      - run: docker save backup-utils -o backup-utils.tar

      - uses: actions/upload-artifact@v3
        with:
          name: backup-utils-${{ inputs.hostname }}
          path: backup-utils.tar

  restore:
    needs: build
    runs-on: ubuntu-latest-xl
    env:
      SSH_KEY: ${{ secrets.BACKUP_SSH_KEY }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: github/backup-utils-private
          token: "${{ secrets.INTERNAL_ACTIONS_DX_BOT_ACCOUNT_TOKEN }}"
          ref: "solmaz/support-cluster-restore"

      - uses: actions/download-artifact@v3
        with:
          name: backup-utils-${{ inputs.hostname }}

      - name: Load docker container
        run: docker load -i backup-utils.tar

      - name: Find backup file version
        id: file
        run: |
          version="${{ inputs.version }}"
          size="${{ inputs.size }}"
          V3_6_COMPATIBLE="3.6 3.7"
          V3_8_COMPATIBLE="3.8 3.9"
          V3_10_COMPATIBLE="3.10 3.11"
          if echo "$V3_10_COMPATIBLE" | grep -q -w "$version"; then
              echo "Version $version is acceptable by 3.10 backup"
              file_version=3.10
          elif echo "$V3_8_COMPATIBLE" | grep -q -w "$version"; then
            echo "Version $version is acceptable by 3.8 backup"
            file_version=3.8
          elif echo "$V3_6_COMPATIBLE" | grep -q -w "$version"; then
            echo "Version $version is acceptable by 3.6 backup"
            file_version=3.6
          else
              echo "Version $version is not acceptable"
              exit 1
          fi

          echo "version=$file_version" >> "$GITHUB_OUTPUT"
          echo "name=v$file_version-$size.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Download from Azure storage
        run: |
          mkdir ghes-data
          az storage blob download \
          --account-name "${{ secrets.AZURE_ACCOUNT_NAME }}" \
          --container-name "${{ secrets.AZURE_CONTAINER_NAME }}" \
          --name "${{ steps.file.outputs.name }}" \
          --file "ghes-data/${{ steps.file.outputs.name }}" \
          --connection-string "${{ secrets.CONNECTIONSTRING }}"

      - name: Unzip backup and setup symlink
        run: |
            mkdir "$HOME/ghe-backup-data"
            dir_name=$(date +%s)
            mkdir "$HOME/ghe-backup-data/$dir_name"

            tar -xvf "ghes-data/${{ steps.file.outputs.name }}" -C "$HOME/ghe-backup-data/$dir_name"

            ln -s "$dir_name" "$HOME/ghe-backup-data/current"

      - name: set up ssh SSH_KEY
        run: echo -e "${SSH_KEY}\n" > "$HOME/backup"

      - name: set up ssh key permissions
        run: chmod 0600 "$HOME/backup"

      - name: change version
        run: echo "${{ inputs.version }}.0" > "$HOME/version"

      - name: Prepare for restore
        run: ssh -p122 -i "$HOME/backup" -o StrictHostKeyChecking=no admin@${{ inputs.hostname }} "ghe-maintenance -s"

      - name: Restore data to standalone instance
        if: ${{ inputs.architecture == 'standalone' }}
        run: |
          docker run -e "GHE_HOSTNAME=${{ inputs.hostname }}" \
          -e "GHE_DATA_DIR=/data" \
          -e "GHE_EXTRA_SSH_OPTS=-p 122 -i /ghe-ssh/id_rsa -o ServerAliveInterval=30 -o ServerAliveCountMax=12000 -o StrictHostKeyChecking=no" \
          -e "GHE_NUM_SNAPSHOTS=15" \
          -v "$HOME/ghe-backup-data:/data" \
          -v "$HOME/backup:/ghe-ssh/id_rsa" \
          -v "$HOME/version:/backup-utils/share/github-backup-utils/version" \
          --rm \
          backup-utils ghe-restore ${{ inputs.hostname }}

      - name: Define GIT_CONFIG manually
        working-directory: .github/workflows
        id: git_config
        if: ${{ inputs.architecture == 'cluster' }}
        run: |
          ssh -p 122 -i "$HOME/backup" -o StrictHostKeyChecking=no admin@${{ inputs.hostname }} "cat /tmp/gheboot-perf-meta.conf" > "$HOME/git_config_public"
          ssh -p 122 -i "$HOME/backup" -o StrictHostKeyChecking=no admin@${{ inputs.hostname }} "cat /data/user/common/cluster.conf" > "$HOME/git_config_private"
          hosts=$(python3 load-test-get-cluster-hosts.py "$HOME/git_config_public" "$HOME/git_config_private")
          echo "hosts=$hosts" >> "$GITHUB_OUTPUT"

      - name: Restore data to cluster instance
        if: ${{ inputs.architecture == 'cluster' }}
        run: |
          docker run -e "GHE_HOSTNAME=${{ inputs.hostname }}" \
          ${{ steps.git_config.outputs.hosts }} \
          -e "GHE_DATA_DIR=/data" \
          -e "GHE_EXTRA_SSH_OPTS=-p 122 -i /ghe-ssh/id_rsa -o ServerAliveInterval=30 -o ServerAliveCountMax=12000 -o StrictHostKeyChecking=no" \
          -e "GHE_NUM_SNAPSHOTS=15" \
          -v "$HOME/ghe-backup-data:/data" \
          -v "$HOME/backup:/ghe-ssh/id_rsa" \
          -e "GIT_CONFIG=$HOME/git_config_public" \
          -v "$HOME/version:/backup-utils/share/github-backup-utils/version" \
          --rm \
          backup-utils ghe-restore ${{ inputs.hostname }}

      - name: Reset maintenance mode after restore
        run: ssh -p122 -i "$HOME/backup" -o StrictHostKeyChecking=no admin@${{ inputs.hostname }} "ghe-maintenance -u"
